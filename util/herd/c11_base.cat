"C++11" withinit

show po
let sb = po
let mo = co

let cacq = acq | (sc & (R | F)) | acq_rel
           | (F & con)
let crel = rel | (sc & (W | F)) | acq_rel
let ccon = R & con				   	   

let fr = rf^-1 ; mo

let dd = (data | addr)+

let fsb = [F] ; sb
let sbf = sb ; [F]

(* release_acquire_fenced_synchronizes_with,
   hypothetical_release_sequence_set,
   release_sequence_set *)

(* OLD: let rs = [crel] ; fsb? ; [A & W] ;
	 (((mo ; [rmw]) | coi) & ~(coe ; [!rmw] ; mo))? *)
let rs_prime = int(_ * _) | (_ * (R & W))
let rs = mo & rs_prime \ ((mo \ rs_prime) ; mo)
		       
(* OLD: let swra = ext (rs ; rf ; [A] ; sbf? ; [cacq]) *)
let swra = ext ([crel] ; fsb? ; [A & W] ; rs? ; rf ; [R & A] ; sbf? ; [cacq])
								     
let swul = ext ([ul] ; lo ; [lk])
let pp_asw = asw \ (asw ; sb)
let sw = pp_asw | swul | swra

(* with_consume_cad_set,
   dependency_ordered_before *)
let cad = ((rf & sb) | dd)+
let dob = (ext ([W & crel] ; fsb? ; [A & W] ; rs?; rf; [ccon])); cad?

(* happens_before,
   inter_thread_happens_before,
   consistent_hb *)
let ithbr = sw | dob | (sw ; sb)
let ithb = (ithbr | (sb ; ithbr))+
let hb = sb | ithb
acyclic hb as Hb


(* coherent_memory_use *)
let hbl = hb & loc

irreflexive ((rf^-1)? ; mo ; rf? ; hb) as Coh

let myCoh = ((rf^-1)? ; mo ; rf? ; hb) 

(* visible_side_effect_set *)
let vis = ([W] ; hbl ; [R])
          & ~(hbl; [W]; hbl)

(* consistent_atomic_rf *) 
irreflexive (rf ; hb) as Rf
	      
(* consistent_non_atomic_rf  *)
empty ((rf ; [nonatomicloc]) \ vis) as NaRf

irreflexive (rf | (mo ; mo ; rf^-1) | (mo ; rf)) as Rmw


(* locks_only_consistent_lo *)
irreflexive (lo ; hb) as Lo1

(* locks_only_consistent_locks *)
irreflexive ([ls] ; lo^-1 ; [ls] ;
  ~(lo ; [ul] ; lo)) as Lo2

(* data_races *)
let cnf = ((W * _) | (_ * W)) & loc
let dr = ext(cnf \ hb \ (hb^-1) \ (A * A))

(* unsequenced_races *)
let ur = int((W * M) | (M * W)) &
         loc & ~[_] & ~(sb+) & ~((sb+)^-1)

(* locks_only_good_mutex_use,
   locks_only_bad_mutexes *)
let bl = ([ls]; (sb & lo); [lk])
         & ~(lo; [ul]; lo)

let losbwoul = (sb & lo & ~(lo; [ul]; lo))
let lu = [ul] &
  ~([ul] ; losbwoul^-1 ; [ls] ; losbwoul ; [ul])


